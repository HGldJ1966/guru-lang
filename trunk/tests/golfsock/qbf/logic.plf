(declare-type pol type)
(declare-term pos pol)
(declare-term neg pol)
(declare-type opp (! na pol (! na pol type)))
(declare-term opp1 ((opp pos) neg))
(declare-term opp2 ((opp neg) pos))
(declare-type o type)
(declare-term conn (! na pol (! na o (! na o o))))
(declare-term not (! na o o))
(declare-term quant (! na pol (! na (! na o o) o)))
(declare-term bval (! na pol o))
(declare-type Equiv (! na o (! na o type)))
(declare-term refl (! p o ((Equiv p) p)))
(declare-term trans (! p o (! q o (! r o (! na ((Equiv p) q) (! na ((Equiv q) r) ((Equiv p) r)))))))
(declare-term connc (! b pol (! p1 o (! p2 o (! q1 o (! q2 o (! na ((Equiv p1) p2) (! na ((Equiv q1) q2) ((Equiv (((conn b) p1) q1)) (((conn b) p2) q2))))))))))
(declare-term connz1 (! b pol (! bb pol (! na ((opp b) bb) (! q o ((Equiv (((conn b) (bval bb)) q)) (bval bb)))))))
(declare-term connz2 (! b pol (! bb pol (! na ((opp b) bb) (! q o ((Equiv (((conn b) q) (bval bb))) (bval bb)))))))
(declare-term connu1 (! b pol (! q o ((Equiv (((conn b) (bval b)) q)) q))))
(declare-term connu2 (! b pol (! q o ((Equiv (((conn b) q) (bval b))) q))))
(declare-term nott ((Equiv (not (bval pos))) (bval neg)))
(declare-term notf ((Equiv (not (bval neg))) (bval pos)))
(declare-term quantz (! b pol (! bb pol (! na ((opp b) bb) (! a pol (! p (! na o o) (! na ((Equiv (p (bval a))) (bval bb)) ((Equiv ((quant b) p)) (bval bb)))))))))
(declare-term quantu (! b pol (! p (! na o o) (! na ((Equiv (p (bval pos))) (bval b)) (! na ((Equiv (p (bval neg))) (bval b)) ((Equiv ((quant b) p)) (bval b)))))))
(declare-term quantn (! b pol (! p1 o ((Equiv ((quant b) (\ x p1))) p1))))
(declare-term quantc (! b pol (! p1 (! na o o) (! p2 (! na o o) (! na (! x o ((Equiv (p1 x)) (p2 x))) ((Equiv ((quant b) p1)) ((quant b) p2)))))))
